import os
from random import randint, choices

def shellcode():
    junk = bytearray(os.urandom(1024))

    xorsh_data = '''89 54 24 10 48 89 4C 24  08 55 57 48 81 EC 48 01
    00 00 48 8B EC 48 8B 85  60 01 00 00 48 83 C0 23
    48 89 45 08 B8 01 00 00  00 48 6B C0 16 48 8B 8D
    60 01 00 00 0F BE 04 01  C1 E0 08 48 98 48 8B 8D
    60 01 00 00 48 8D 44 01  19 B9 01 00 00 00 48 6B
    C9 15 48 8B 95 60 01 00  00 48 0F BE 0C 0A 48 03
    C1 48 89 45 28 C7 45 44  00 00 00 00 EB 08 8B 45
    44 FF C0 89 45 44 48 63  45 44 48 8B 4D 08 0F BE
    04 01 85 C0 74 02 EB E6  C7 45 64 00 00 00 00 EB
    08 8B 45 64 FF C0 89 45  64 8B 85 68 01 00 00 39
    45 64 7D 3E 48 63 45 64  48 89 85 38 01 00 00 8B
    45 64 99 F7 7D 44 8B C2  48 98 48 8B 4D 08 0F BE
    04 01 48 8B 4D 28 48 8B  95 38 01 00 00 0F BE 0C
    11 33 C8 8B C1 48 63 4D  64 48 8B 55 28 88 04 0A
    EB AF 48 8D A5 48 01 00  00 5F 5D C3 CC CC CC CC'''.split()

    shl = len(xorsh_data)
    offset = randint(25, 1023 - shl)

    for i in range(shl):
        junk[offset + i] = int(xorsh_data[i], 16)

    junk[0] = 0xe9
    junk[1] = (offset - 5) & 0xFF
    junk[2] = (offset - 5) >> 8
    junk[3] = 0
    junk[4] = 0

    print(junk)


def shellcode_xored(code):
    shl = len(code)
    offset = randint(56, 1023 - shl)
    print('Offset:', hex(offset))
    key = choices(range(1, 255), k=randint(7, 20))
    print('Key:', [hex(e) for e in key])

    junk = bytearray(os.urandom(1024))

    junk[20] = 0xe9
    junk[21] = (offset - 25) & 0xFF
    junk[22] = (offset - 25) >> 8
    junk[23] = 0
    junk[24] = 0

    for i in range(len(key)):
        junk[35 + i] = key[i]
    junk[35 + len(key)] = 0

    for i in range(shl):
        junk[offset + i] = int(code[i], 16) ^ key[i % len(key)]

    print(junk)


part1 = '''48 89 4C 24 08 55 57 48  81 EC 48 01 00 00 48 8B
EC C7 45 04 01 00 00 00  C7 45 24 02 00 00 00 C7
45 44 00 00 00 00 C7 45  64 00 00 00 00 EB 08 8B
45 64 FF C0 89 45 64 83  7D 64 19 7D 5F 8B 45 04
89 45 44 8B 45 24 89 45  04 8B 45 44 8B 4D 24 03
C8 8B C1 89 45 24 8B 45  64 99 83 E2 07 03 C2 83
E0 07 2B C2 48 98 48 8B  8D 60 01 00 00 0F BE 04
01 33 45 24 89 85 34 01  00 00 8B 45 64 99 83 E2
07 03 C2 83 E0 07 2B C2  48 98 48 8B 8D 60 01 00
00 8B 95 34 01 00 00 88  14 01 EB 93 48 8D A5 48
01 00 00 5F 5D C3'''.split()


expand = '''48 89 54 24 10 48 89 4C  24 08 55 57 48 81 EC 68
01 00 00 48 8B EC C7 45  04 00 00 00 00 C7 45 24
00 00 00 00 C7 45 44 00  00 00 00 C7 45 64 00 00
00 00 B8 04 00 00 00 48  6B C0 00 48 8B 8D 88 01
00 00 C7 04 01 63 51 E1  B7 C7 45 44 01 00 00 00
EB 08 8B 45 44 FF C0 89  45 44 83 7D 44 1A 73 25
8B 45 44 FF C8 8B C0 48  8B 8D 88 01 00 00 8B 04
81 05 B9 79 37 9E 8B 4D  44 48 8B 95 88 01 00 00
89 04 8A EB CD C7 45 64  00 00 00 00 8B 45 64 89
45 44 C7 85 84 00 00 00  4E 00 00 00 8B 85 84 00
00 00 89 85 54 01 00 00  8B 85 84 00 00 00 FF C8
89 85 84 00 00 00 83 BD  54 01 00 00 00 7E 0C C7
85 58 01 00 00 01 00 00  00 EB 0A C7 85 58 01 00
00 00 00 00 00 83 BD 58  01 00 00 00 0F 84 03 01
00 00 8B 45 44 48 8B 8D  88 01 00 00 8B 04 81 03
45 04 03 45 24 C1 E0 03  8B 4D 44 48 8B 95 88 01
00 00 8B 0C 8A 03 4D 04  03 4D 24 C1 E9 1D 0B C1
89 85 54 01 00 00 8B 45  44 48 8B 8D 88 01 00 00
8B 95 54 01 00 00 89 14  81 8B 85 54 01 00 00 89
45 04 8B 45 64 48 8B 8D  80 01 00 00 8B 04 81 03
45 04 03 45 24 8B 4D 24  8B 55 04 03 D1 8B CA 83
E1 1F D3 E0 8B 4D 64 48  8B 95 80 01 00 00 8B 0C
8A 03 4D 04 03 4D 24 89  8D 54 01 00 00 8B 55 24
44 8B 45 04 44 03 C2 41  8B D0 83 E2 1F 41 B8 20
00 00 00 44 2B C2 41 8B  D0 0F B6 CA 8B 95 54 01
00 00 D3 EA 8B CA 0B C1  89 85 58 01 00 00 8B 45
64 48 8B 8D 80 01 00 00  8B 95 58 01 00 00 89 14
81 8B 85 58 01 00 00 89  45 24 8B 45 44 FF C0 33
D2 B9 1A 00 00 00 F7 F1  8B C2 89 45 44 8B 45 64
FF C0 33 D2 B9 04 00 00  00 F7 F1 8B C2 89 45 64
E9 B7 FE FF FF 48 8D A5  68 01 00 00 5F 5D C3'''.split()

funny_rc5_encrypt = '''48 89 54 24 10 48 89 4C  24 08 55 57 48 81 EC 48
01 00 00 48 8B EC C7 45  04 00 00 00 00 EB 09 8B
45 04 83 C0 02 89 45 04  83 7D 04 04 0F 83 57 01
00 00 8B 45 04 48 8B 8D  68 01 00 00 8B 04 81 89
45 24 8B 45 04 FF C0 8B  C0 48 8B 8D 68 01 00 00
8B 04 81 89 45 44 B8 04  00 00 00 48 6B C0 00 48
8B 8D 60 01 00 00 8B 04  01 8B 4D 24 03 C8 8B C1
89 45 24 B8 04 00 00 00  48 6B C0 01 48 8B 8D 60
01 00 00 8B 04 01 8B 4D  44 03 C8 8B C1 89 45 44
C7 45 64 00 00 00 00 EB  08 8B 45 64 FF C0 89 45
64 83 7D 64 0C 0F 8D B5  00 00 00 8B 45 44 8B 4D
24 33 C8 8B C1 8B 4D 44  83 E1 1F D3 E0 8B 4D 44
8B 55 24 33 D1 8B CA 89  8D 34 01 00 00 8B 55 44
83 E2 1F 41 B8 20 00 00  00 44 2B C2 41 8B D0 0F
B6 CA 8B 95 34 01 00 00  D3 EA 8B CA 0B C1 8B 4D
04 03 C9 8B C9 48 8B 95  60 01 00 00 03 04 8A 89
45 24 8B 45 24 8B 4D 44  33 C8 8B C1 8B 4D 24 83
E1 1F D3 E0 8B 4D 24 8B  55 44 33 D1 8B CA 89 8D
34 01 00 00 8B 55 24 83  E2 1F 41 B8 20 00 00 00
44 2B C2 41 8B D0 0F B6  CA 8B 95 34 01 00 00 D3
EA 8B CA 0B C1 8B 4D 04  8D 4C 09 01 8B C9 48 8B
95 60 01 00 00 03 04 8A  89 45 44 E9 39 FF FF FF
8B 45 04 48 8B 8D 68 01  00 00 8B 55 24 89 14 81
8B 45 04 FF C0 8B C0 48  8B 8D 68 01 00 00 8B 55
44 89 14 81 E9 96 FE FF  FF 48 8D A5 48 01 00 00
5F 5D C3'''.split()

#shellcode()
#shellcode_xored(part1)
print(len(part1), len(expand), len(funny_rc5_encrypt))